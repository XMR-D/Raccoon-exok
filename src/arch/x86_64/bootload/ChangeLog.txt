week 1 : Starting reading and documentating on the Required Knowledge
(16/05/22 -- 22/05/22)
		-- getting information on how to use intel documentation.

		-- getting basic information on how a CPU work.

		-- getting basic information on x86 assembly.

		-- starting tutoriel on how to use objdump.

		-- starting Bran's tutoriel for kernel coding.

week 2 :  Hello world kernel, Understanding basic architecture .
(22/05/22 -- 29/05/22)
		-- finished coding main.c start.s scrn.c link.ld.

		-- figuring out why grub don't load the kernel ("got multiboot header
		missing").

		-- found that multiboot header constants (magic, flags, checksum)
		were not properly initialized in start.s, and start.s had wrong
		extension (.asm instead of .s).

		-- Having a "Hello Kernel World !" printed and working, i will now
		rework on the understanding of the actual architecture. (why these
		work and how they work together)

week 3 : GDT and IDT implementation
(29/05/22 - 05/06/22)
		-- followed Bran's kernel programming tuto but now i will try using
		intel documentation only.

		-- GDT was implemented using the bran's kernel tutoriel
		the IDT will be implemented by myself.

		-- IDT is actually the table used to handle interrupts signals and
		misc. the structure is really close to the GDT.

		-- I finished coding the first Isr "divide by 0 exception" but it
		close my kernel as soon as i open it. after searching for 2 days
		i found that a 0 was placed after a ret instruction, However it 
		didn't fixed the problem.

		-- I think the problem come from my call of isr_set_descriptor, perhaps
		the base adress is wrong. i really need coffee.

		-- I will use bochs to debug my idt and my gdt, but figuring out how
		to use it take me  2 days.

		-- Ok, i finally fixed the idt by rewritting all the program, i think
		the error was in the identifiers of variables and im starting getting
		good at handling bochs

week 4: ISR writing / debbugging / starting IRQs mapping
(05/06/22 - 12/06/22)
		-- Ok so i pre-code the interrupt 0 of intel 32-bit documentation
		and i tried to test it, of course with a broken idt it was hard to
		test it, now im facing a new issue (invalid opcode 0x6) thrown by an
		assembly line, a lock push on adress 0008:0x3, don't know why.
		the procco do the following : throwing an exception due to a division
		by 0 (from my test so it's normal), and then throw an invalid opcode
		which is not normal.

		-- I found the problem, while testing randoms modifs, i made the whole
		thing work, by adding one to the adress it was fixed (no comment).
		Now I have to remap the IRQs on the PIC but first i need to
		understand how this kinds of signals works and communicate with the
		CPU and the Hardware.

		-- reading documentation on PIC and IRQs and creating irq.c.

week 5: IRQS mapping the real thing
(12/06/22 - 19/06/22)
		-- not as hard as i was thinking.

week 6: Week off due to medical reasons
(19/06/22 - 26/06/22)

week 7: Keyboard driver coding
(26/06/22 - 03/07/22)
		-- Ok it's time to get back to work.

		-- I implemented a function named keyboard_handling() and tried
		to execute it, it didn't work because i did not unmask the IRQs,
		now an new error occurs, the irqs are not well mapped, the kernel 
		throw an floating point error, and i don't know if it come from the
		mapping or somewhere else.

		-- becoming quite good with bochs, I rechecked the Init Controls
		Words and the value of the eflags, the problem can't be from the IRQ
		mapping.

		-- more checking today.

		-- found the problem, ISRs were not set properly, the error code and the
		error number were not pushed. fixed it by implementing a function that
		save the errcode and the error number, ISRs works well, however the
		ticking IRQ throw a general protection fault. So i need to check my
		gdt.

		-- i did not push the err code so i fixed it and it work just fine.

week 8: MEMORY MAP AND PMM (KILL ME)
(03/06/22 - )
		-- To get the memory map, first i need to push ebx before jumping into
		the kernel, and then get the multiboot info struct to get the memory
		map address, then i code a simple for function to print all the
		segment of the mmap.

		-- I don't know why my mmap is full of garbage, it's been 3 days now
		!!! I rechecked the mmap struct and the multiboot info struct and
		nothing, i checked the aligment and nothing, i rechecked the objdump
		of the functions nothing, tried to put "volatile" AND STILL NOTHING !
		arrrrrr, need some coffee.


